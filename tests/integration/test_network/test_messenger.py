# integration.test_network.test_messenger.py
from __future__ import annotations
import asyncio
from typing import TYPE_CHECKING

from fixtures.network import TEST_MESSENGERS_INTEGRATION_REPO_PATH
from fixtures.shop import PRODUCTS_URLS_INTEGRATION_TEST_PATH
from integration.testhelper import ConcreteShopHelper
from network import messenger
from network.connection import AioHttpSession, AioHttpRequest
from shop.product import Size
from shop.shop import Shop
from unit.testhelper import WebtomatorTestCase

if TYPE_CHECKING:
    from typing import Optional
    from network.connection import Session, Request


class DiscordTest(WebtomatorTestCase):
    sut: Optional[messenger.Discord]
    _shopHelper: ConcreteShopHelper
    _session: Optional[Session]
    _request: Optional[Request]
    _messengerRepo: Optional[messenger.Repo]

    def setUp(self) -> None:
        self.sut, self._session, self._request,  self._messengerRepo = None, None, None, None

        # Make test shop
        shop = Shop(name="BSTN", url="https://www.bstn.com/")
        self._shopHelper = ConcreteShopHelper(
            shop=shop,
            productsUrlsRepoPath=PRODUCTS_URLS_INTEGRATION_TEST_PATH)
        self._shopHelper.assignProductsFromProductsUrlsRepo()
        assert len(self._shopHelper.shop.products) > 0
        product = self._shopHelper.shop.products[0]
        product.name = "A Test Product"
        product.basePrice = 122.23
        product.currency = "EUR"
        product.urlThumb = "https://nb.scene7.com/is/image/NB/m997web_nb_02_i"
        size1 = Size(sizeEU="42 2/3", isInStock=True)
        size2 = Size(sizeEU="40", isInStock=True)
        size3 = Size(sizeEU="39.5", isInStock=True)
        size4 = Size(sizeEU="37 1/3", isInStock=True)
        product.sizes = [size1, size2, size3, size4]

    def tearDown(self):
        del self.sut, self._shopHelper, self._session, self._request, self._messengerRepo

    def test_send_productMessage(self):
        async def test():
            # Given
            assert len(self._shopHelper.shop.products) > 0
            product = self._shopHelper.shop.products[0]
            shop = self._shopHelper.shop

            await self.initSUT()

            # When / Then
            try:
                await self.sut.send(productMsg=product, shop=shop)

            except Exception as e:
                self.fail(f"Expected Discord 'sendProduct' to run without exception, but got {e}")

            # Cleanup
            await self._session.close()

        asyncio.run(test())

    def test_send_logMessage(self):
        async def test():
            # Given
            msgText = "This is a log message, generated by Webtomator's integration test. " \
                      "It should appear on a dedicated log webhook."

            await self.initSUT()

            # When / Then
            try:
                await self.sut.send(logMsg=msgText)

            except Exception as e:
                self.fail(f"Expected Discord 'sendLog' to run without exception, but got {e}")

            # Cleanup
            await self._session.close()

        asyncio.run(test())

    def test_send_errorMessage(self):
        async def test():
            # Given
            msgText = "This is an error message, generated by Webtomator's integration test. " \
                      "It should appear on a dedicated error webhook."

            await self.initSUT()

            # When / Then
            try:
                await self.sut.send(errorMsg=msgText)

            except Exception as e:
                self.fail(f"Expected Discord 'sendError' to run without exception, but got {e}")

            # Cleanup
            await self._session.close()

        asyncio.run(test())

    async def initSUT(self):
        messengerDao = messenger.DiscordTinyDao(path=TEST_MESSENGERS_INTEGRATION_REPO_PATH)
        self._messengerRepo = messenger.Repo(dao=messengerDao)

        self._session = AioHttpSession()
        self._request = AioHttpRequest(session=self._session)
        self.sut = messenger.Discord(request=self._request, repo=self._messengerRepo)

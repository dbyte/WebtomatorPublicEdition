# shop.shopRepo.py
from typing import List

import debug.logger as clog
from shop.productsUrlsRepo import ProductsUrlsRepo
from shop.shop import Shop
from shop.shopDao import TinyShopDao
from storage.base import Dao

logger = clog.getLogger(__name__)


class ShopRepo:

    def __init__(self, dao: Dao = TinyShopDao()):
        self._dao = dao

    def getAll(self) -> List[Shop]:
        """ Load all shops from TinyDB to a list of 'Shop' objects.
        :return: List of 'Shop' objects
        """
        with self._dao as dao:
            shops = dao.loadAll()  # raises
        return shops

    def setAll(self, shops: List[Shop]) -> None:
        """ Caution! Overwrites all shops with the given shop list.
        :param shops: List of shop objects
        :return: None
        """
        with self._dao as dao:
            dao.saveAll(data=shops)  # raises

    def update(self, shop: Shop) -> None:
        """ Update a shop in TinyDB.
        :param shop: A 'Shop' object with a valid UID.
        :return: None
        """
        with self._dao as dao:
            dao.update(data=shop)  # raises

    def findByUID(self, uid: str) -> Shop:
        """ Finds a Shop with the given UID.

        :param uid: UID of Shop to search
        :return: Found Shop or raises
        """
        with self._dao as dao:
            shop = dao.find(uid=uid)  # raises
        return shop

    def findByName(self, name: str) -> List[Shop]:
        """ Finds shops by the given shop name.

        :param name: Name of the Shop
        :return: List of found shops or raises
        """
        with self._dao as dao:
            shops = dao.find(shopName=name)  # raises
        return shops

    def updateFromProductsUrls(self, productsUrlsRepo: ProductsUrlsRepo):
        # Note that we use the fact that lists are reference based, so any modifications
        # of the lists are passed by reference.
        repoShops: List[Shop] = list()

        try:
            repoShops = self.getAll()

        except Exception as e:
            logger.warning("%s", e, exc_info=True)

        try:
            shopsFromProductURLs = productsUrlsRepo.createShops()

        except Exception as e:
            raise e

        if (not repoShops) and shopsFromProductURLs:
            self.setAll(shops=shopsFromProductURLs)

        elif repoShops and shopsFromProductURLs:
            # Persist shops and/or products detected by productsUrlsRepo which
            # currently do not exist in database.
            for shopCandidate in shopsFromProductURLs:
                # Check if shop exists in database
                results = list(filter(lambda s: s.url == shopCandidate.url, repoShops))

                if results:
                    # Shop exists in database, add missing products from ProductsUrls repo
                    foundPersistentShop = results[0]
                    foundPersistentProductsUrls = \
                        [p.url for p in foundPersistentShop.products if p.url]

                    # Use exact URLs for product comparison.
                    for productCandidate in shopCandidate.products:
                        if productCandidate.url not in foundPersistentProductsUrls:
                            foundPersistentShop.addProduct(product=productCandidate)

                else:
                    # Shop does not exist in database, add the entire shop candidate
                    repoShops.append(shopCandidate)

            # Delete shops and/or products from database which do not exist in ProductsURLs repo.
            for persistentShop in reversed(repoShops):
                # Check if shop exists in shops which were generated by ProductsUrls
                results = list(filter(lambda s: s.url == persistentShop.url, shopsFromProductURLs))

                if results:
                    # Shop in database exists for ProductsUrls.
                    # Check if some products have to be removed from the database.
                    foundProductsUrlsShop = results[0]
                    foundProductsUrls = [p.url for p in foundProductsUrlsShop.products if p.url]
                    productsToDelete = \
                        [p for p in persistentShop.products if p.url not in foundProductsUrls]

                    if productsToDelete:
                        [persistentShop.products.remove(p) for p in productsToDelete]

                else:
                    # Shop in database does not exist anymore for ProductsUrls - remove it
                    repoShops.remove(persistentShop)
                    continue

            self.setAll(shops=repoShops)

        else:
            raise ValueError("No shops found. Searched in shop repo and ProductsUrls repo.")